@page "/login"
@page "/login/redirect/{RedirectUrl}"
@inject ICustomerService customerService

<div style="background-color: rgb(242, 244, 249);">
    <div class="input-group">
        <div class="input-group-prepend">
            <button type="button" onclick="window.history.back();" class="btn search-navs-btns back-button" style="position: relative;">
                <i class="si si-arrow-left"></i>
            </button>
        </div>
    </div><img src="/assets/img/login-header.png" class="login-image pull-right mr-15" alt="login-header">
    <div class="login-texts px-15 mt-50 pb-20">
        <span class="login-title">LOGIN</span>
        <br><span class="login-subtitle">Enter your email and password</span>
    </div>
</div>
<div class="bg-white">

    <EditForm OnValidSubmit="LoginUserRequest" Model="User">
        <DataAnnotationsValidator />
        <div class="form-group px-15 pt-30">

            <label class="col-12 edit-address-input-label">Phone or Email </label>

            <div class="col-md-9 pb-5">
                <InputText placeholder="Email or Phone" autofocus="true" @bind-Value="User.EmailAddress" auto-complete="off" class="form-control edit-address-input" />
                <ValidationMessage For="@(() => User.EmailAddress)" />
            </div>

            <label class="col-12 edit-address-input-label">Password </label>

            <div class="col-md-9">
                <InputText type="password" placeholder="Password" @bind-Value="User.Password" auto-complete="off" class="form-control edit-address-input" />
                <ValidationMessage For="@(() => User.Password)" />
            </div>
        </div>
        <div class="mt-20 px-15 pt-15 button-block">
            @if (IsContentLoading)
            {
                <ContentLoader />
                <button type="button" disabled class="btn btn-main" style="background-color: rgb(252, 128, 25);">
                    LOGIN
                </button>
            }
            else
            {
                <button type="submit" class="btn btn-main" style="background-color: rgb(252, 128, 25);">LOGIN</button>
            }
        </div>
    </EditForm>
    <div class="text-center mt-50 mb-20">Don't have an account? <a style="color: rgb(252, 128, 25);" href="/register@(string.IsNullOrWhiteSpace(RedirectUrl)==false ? $"/redirect/{RedirectUrl}": "")">Register</a></div>
</div>

@if (!string.IsNullOrWhiteSpace(NotificationMessage))
{
    <Notification Message="@NotificationMessage" />
}
@code {

    private LoginViewModel User { get; set; } = new LoginViewModel();
    [Parameter]
    public string RedirectUrl { get; set; }
    private string NotificationMessage { get; set; }
    private bool IsContentLoading { get; set; } = false;
    private async Task LoginUserRequest()
    {
        // validate user
        try
        {
            IsContentLoading = true;
            NotificationMessage = null;
            //Verify Account
            Customer confirmedUser = await customerService.VerifyCredentialsAsync(User.EmailAddress, User.Password);
            if (confirmedUser == null)
            {
                NotificationMessage = "Invalid Username or Password Provided";
                User.Password = string.Empty;
            }
            else
            {
                //Create an Identity User
                AuthenticatedUser newAuthUser = new AuthenticatedUser
                {
                    Id = confirmedUser.Id,
                    EmailAddress = confirmedUser.EmailAddress,
                    FullName = confirmedUser.FullName,
                    IsAccountConfirmed = confirmedUser.IsAccountConfirmed,
                    Location = confirmedUser.Location ?? string.Empty,
                    Role = confirmedUser.UserAccountType,
                    PhoneNumber = confirmedUser.PhoneNumber
                };

                //Becuase we Want to Use THE lOGIN Function ONLY AVAILABLE IN the Implementation
                await ServiceProvider.Get<ODAAuthStateProvider>().LoginAsync(newAuthUser);
                //Check Redirection
                if (string.IsNullOrWhiteSpace(RedirectUrl))
                    nav.NavigateTo("/");
                else
                    nav.NavigateTo(string.Format("/{0}", RedirectUrl));
            }

        }
        catch (Exception)
        {
            NotificationMessage = "Oops Unable to Authenticate User. Please Try Again Later";
        }
        finally
        {
            IsContentLoading = false;
        }

    }
}
